<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue学习(一)</title>
      <link href="/2021/07/12/VUE%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
      <url>/2021/07/12/VUE%E5%AD%A6%E4%B9%A0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>​    个人学习笔记</p><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p><strong>插值</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt; Message:&#123;&#123;msg&#125;&#125; &lt;&#x2F;view&gt; &#x2F;&#x2F;文本插值</span><br><span class="line">&#x2F;&#x2F;&#123;&#123;&#125;&#125;中间只能放单个表达式所以</span><br><span class="line">&lt;view&gt;&#123;&#123; ok ? &#39;YES&#39; : &#39;NO&#39; &#125;&#125;&lt;&#x2F;view&gt;&#x2F;&#x2F;该语句正确</span><br><span class="line">&lt;view&gt;&#123;&#123;if(ok) &#123;return message&#125;&#125;&#125;&lt;&#x2F;view&gt;&#x2F;&#x2F;该语句错误</span><br></pre></td></tr></table></figure><p><strong>指令</strong></p><hr><p>v-bind</p><ul><li>缩写为”:”</li><li>在绑定prop时，prop必须在子组件中声明</li><li>可以用修饰符指定不同的绑定类型</li></ul><hr><p>v-on</p><ul><li>缩写为‘@’</li><li>用于监听DOM事件</li></ul><hr><p>v-once</p><ul><li>只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过</li><li>添加了v-once能保证节点只渲染一次，但不一定能优化渲染性能，反而可能会拖慢客户端服用节点时的比对效率</li></ul><hr><p>v-html</p><ul><li>内容作为普通的HTML插入，不会作为Vue模板进行编译</li><li>使用v-html组合模板，可以重新考虑是否通过组件来替代</li><li>App端和H5端支持v-html，微信小程序会被转为rich-text，其他端不支持</li></ul><h3 id="data属性"><a href="#data属性" class="headerlink" title="data属性"></a>data属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;正确用法，使用函数返回对象</span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        title: &#39;Hello&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;错误写法，会导致再次打开页面时，显示上次数据</span><br><span class="line">data: &#123;</span><br><span class="line">    title: &#39;Hello&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;错误写法，同样会导致多个组件实例对象数据相互影响</span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">    title: &#39;Hello&#39;</span><br><span class="line">&#125;</span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        obj</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Class与Style绑定"><a href="#Class与Style绑定" class="headerlink" title="Class与Style绑定"></a>Class与Style绑定</h3><p><strong>对象语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &lt;view class&#x3D;&quot;static&quot; :class&#x3D;&quot;&#123; active: isActive&#125;&quot;&gt;111&lt;&#x2F;view&gt;&#x2F;&#x2F;一个普通的class可以和:class共存</span><br><span class="line">&lt;view class&#x3D;&quot;static active&quot;&gt;111&lt;&#x2F;view&gt;&#x2F;&#x2F;如果isActive，这一行和上一行效果一样</span><br></pre></td></tr></table></figure><p><strong>数组语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class&#x3D;&quot;static&quot; :class&#x3D;&quot;[activeClass,errorClass]&quot;&gt;111&lt;&#x2F;view&gt;&#x2F;&#x2F;传入activeClass,errorClass这两个变量的值的class</span><br><span class="line">&lt;view class&#x3D;&quot;static activeClass errorClass&quot;&gt;111&lt;&#x2F;view&gt;&#x2F;&#x2F;如果activeClass&#x3D;&quot;activeClass&quot;,errorClass&#x3D;&quot;errorClass&quot;，那么这一行和上一行是一样的</span><br><span class="line">&lt;view :class&#x3D;&quot;[activeClass]&quot; :style&#x3D;&quot;[baseStyles,overridingStyles]&quot;&gt;&lt;&#x2F;view&gt;&#x2F;&#x2F;支持</span><br><span class="line">&lt;!--不支持computed方法生成class或者style字符串--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;container&quot; :class&#x3D;&quot;computedClassStr&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;container&quot; :class&#x3D;&quot;computedClassObject&quot;&gt;&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><p><strong>用在组件上</strong></p><p>非H5端不支持自定义组件上使用Class和Style绑定</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p><strong>v-if和v-else</strong></p><p>​    所有值都是真值，除了false、0、””、null、undefined和NaN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">    &lt;view v-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot;&gt;A&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot;&gt;B&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot;&gt;C&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view v-else&gt;Not A&#x2F;B&#x2F;C&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><p><strong>条件渲染分组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--控制template下的所有元素是否渲染--&gt;</span><br><span class="line">&lt;template v-if&#x3D;&quot;seen&quot;&gt;</span><br><span class="line">    &lt;view&gt;标题&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view&gt;内容：现在你看到我了&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p><strong>v-show</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view v-show&#x3D;&quot;ok&quot;&gt;Hello!&lt;&#x2F;view&gt;&#x2F;&#x2F;用法和v-if基本一致</span><br></pre></td></tr></table></figure><p><strong>v-if和v-show区别</strong></p><ul><li>v-if有更高的切换开销，如果在运行时条件很少改变，则使用v-if较好</li><li>v-show有更高的初始渲染开销。如果需要非常频繁切换，使用v-show较好</li></ul><p>注意</p><ul><li>不推荐同时使用v-if和v-for</li><li>当v-if和v-for一起使用时，v-for具有比v-if更高的优先级</li></ul><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--遍历数组--&gt;</span><br><span class="line">&lt;view v-for&#x3D;&quot;(item, index) in items&quot;&gt;&#x2F;&#x2F;item为items元素的别名、index为相对应的索引</span><br><span class="line">    &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--遍历property--&gt;</span><br><span class="line"> &lt;view v-for&#x3D;&quot;(value, name, index) in object&quot;&gt;&#x2F;&#x2F;value为object元素的键,name为object元素的值,index为相对应的索引</span><br><span class="line">     &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><p><strong>key</strong></p><p>​    当 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种排序算法</title>
      <link href="/2021/06/24/%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2021/06/24/%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>​        记录一下几种常用的排序算法，方便自己以后使用、复习。</p><a id="more"></a><hr><h2 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h2><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p>假设有一个大小为n的乱序数组</p><ul><li>从索引0开始依次比较相邻的两个元素，直到数组尾。</li><li>如果前一位元素比后一位元素大的话，交换这两个元素的位置。</li><li>每一次循环，都可以得到最后一个数是该数组的最大值。</li><li>每次循环忽略上一次循环的最后一位元素。</li><li>直到所有元素都完成排序。</li></ul><h3 id="动图展示"><a href="#动图展示" class="headerlink" title="动图展示"></a>动图展示</h3><img src = "../../../../images/bubbleSort.gif"><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">BubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取数组大小</span></span><br><span class="line">    <span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="comment">//创建一个标志位，用于判断循环中是否进行交换</span></span><br><span class="line">    <span class="keyword">bool</span> tag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果前一位数比后一位数字大的时候，交换这两个数</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                <span class="comment">//标志变为false，说明本次本次循环经过了交换</span></span><br><span class="line">                tag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果循环为进行交换，说明该数组已经是正序，退出循环</span></span><br><span class="line">        <span class="keyword">if</span>(tag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：当是最好情况时（只进行了一次循环，就排序完成），时间复杂度为O(n),最坏情况则是要进行(n*n)/2，时间复杂度为O(n<sup>2</sup>)，平均时间复杂度为O(n<sup>2</sup>)。</li><li>空间复杂度：O(1)。</li></ul><hr><h2 id="选择排序法"><a href="#选择排序法" class="headerlink" title="选择排序法"></a>选择排序法</h2><h3 id="算法原理-1"><a href="#算法原理-1" class="headerlink" title="算法原理"></a>算法原理</h3><ul><li>从数组索引0位置开始，到数组尾，找到数组中最小的数字，记录它的索引。</li><li>交换数组的第一个和最小的数字。</li><li>每次循环起始位置加1，交换起始位置和最小数字。</li><li>直到起始位置为数组尾时退出循环。</li></ul><h3 id="动图展示-1"><a href="#动图展示-1" class="headerlink" title="动图展示"></a>动图展示</h3><img src = "../../../../images/selectionSort.gif"><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">SelectSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">int</span> minIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果j索引的数字比当前最小值小时，把j赋值给minIndex</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex])</span><br><span class="line">            &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果初始位置就是最小值，直接cotinue</span></span><br><span class="line">        <span class="comment">//（注意：如果用抑或运算进行交换，同一个数进行抑或会变为0，这里的同一个数不是相同的数字，是指相同的地址）</span></span><br><span class="line">        <span class="keyword">if</span> (i == minIndex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//利用抑或运算进行交换，节省了(很少的)空间，但是不方便观看</span></span><br><span class="line">        arr[i] = arr[i] ^ arr[minIndex];</span><br><span class="line">        arr[minIndex] = arr[i] ^ arr[minIndex];</span><br><span class="line">        arr[i] = arr[i] ^ arr[minIndex];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：不管原数组顺序如何，该排序方法都要进行(n*n)/2，所以该方法的时间复杂度：O(n<sup>2</sup>)，平均时间复杂度为O(n<sup>2</sup>)。</p><p>空间复杂度：O(1)。</p><hr><h2 id="插入排序法"><a href="#插入排序法" class="headerlink" title="插入排序法"></a>插入排序法</h2><h3 id="算法原理-2"><a href="#算法原理-2" class="headerlink" title="算法原理"></a>算法原理</h3><ul><li>从数组头开始依次往后循环</li><li>从第二个数开始，依次与前一个数进行比较</li><li>如果该数字比前一个数大则继续，反之则与前一个数交换，并且从这个数开始依次往前循环，直到数组头退出</li><li>循环到数组尾结束排序</li></ul><h3 id="动图展示-2"><a href="#动图展示-2" class="headerlink" title="动图展示"></a>动图展示</h3><img src = "../../../../images/insertionSort.gif"><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">InsertionSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;arr[i<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果该元素比前一位元素大，继续循环</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果该元素小于前一位元素进入另一轮循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j] = arr[j]^arr[j<span class="number">-1</span>];</span><br><span class="line">                arr[j<span class="number">-1</span>] = arr[j]^arr[j<span class="number">-1</span>];</span><br><span class="line">                arr[j] = arr[j]^arr[j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果该数比前一个元素大或者相等，直接退出该循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：如果数组原本是一个有序数组，也就是说最小的时间复杂度为O(n)，如果该数组是最坏的情况，那么时间复杂度为O(n<sup>2</sup>)，平均的时间复杂度为O(n<sup>2</sup>)。</p><p>空间复杂度：空间复杂度为O(1)。</p><hr><h2 id="希尔排序法"><a href="#希尔排序法" class="headerlink" title="希尔排序法"></a>希尔排序法</h2><h3 id="算法原理-3"><a href="#算法原理-3" class="headerlink" title="算法原理"></a>算法原理</h3><ul><li>取增量k（数组长度/2），从数组头开始，比较该索引和该索引+k的两个数，如果该索引的数较大就进行交换</li><li>索引值+k等于数组大小进入下一次循环</li><li>每一次循环k的值取上一次循环的k值的一半</li></ul><h3 id="动图展示-3"><a href="#动图展示-3" class="headerlink" title="动图展示"></a>动图展示</h3><img src = "../../../../images/shellSort.gif"><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ShellSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> k = n/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始k值为数组长度的一半，每次循环k值减半</span></span><br><span class="line">    <span class="keyword">while</span>(k/<span class="number">2</span>&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">//遍历k以后的值，如果发现前一位的数比当前数字小，则往前循环插入</span></span><br><span class="line">            <span class="comment">//直到前面的数比当前数字小或者遍历到索引小于0之前，退出循环</span></span><br><span class="line">j = i;</span><br><span class="line"><span class="keyword">while</span> (j-k&gt;=<span class="number">0</span>&amp;&amp;arr[j] &lt; arr[j - k])</span><br><span class="line">&#123;</span><br><span class="line">arr[j] = arr[j] ^ arr[j - k];</span><br><span class="line">arr[j - k] = arr[j] ^ arr[j - k];</span><br><span class="line">arr[j] = arr[j] ^ arr[j - k];</span><br><span class="line">j = j - k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        k /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：他的最好的情况与最坏的情况和插入排序是一样的，但是因为它会优先比较距离比较远的元素，所以他的平均时间复杂度为O(n<sup>1.3</sup>)。</p><p>空间复杂度：O(1)。</p><hr><h2 id="归并排序法"><a href="#归并排序法" class="headerlink" title="归并排序法"></a>归并排序法</h2><h3 id="算法原理-4"><a href="#算法原理-4" class="headerlink" title="算法原理"></a>算法原理</h3><ul><li>把数组对半分开，直至所有数组都只有单个元素</li><li>第一个循环，比较相邻的两个元素，把小的元素放在前面，然后合并成一个数组</li><li>每次循环，比较相邻数组的第一个元素，把小的元素放到合并数组的末尾</li><li>直到数组合并成原数组大小，退出循环</li></ul><h3 id="动图展示-4"><a href="#动图展示-4" class="headerlink" title="动图展示"></a>动图展示</h3><img src = "../../../../images/mergeSort.gif"><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">MergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//当数组大小为1的时候返回原数组</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果数组大于1，则把原数组分为左右两个数组</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left, right;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        left.push_back(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        right.push_back(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归，直至分裂至单个元素</span></span><br><span class="line">    <span class="comment">//然后逐一合并</span></span><br><span class="line">    <span class="keyword">return</span> Merge(MergeSort(left), MergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//left和right大小大于1时，left和right都是有序数组</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="keyword">while</span> (left.<span class="built_in">size</span>() &gt; <span class="number">0</span> &amp;&amp; right.<span class="built_in">size</span>() &gt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当左数组、右数组都存在时</span></span><br><span class="line">        <span class="comment">//比较两个数组最小的数（因为都是升序数组，所以第一个数最小）</span></span><br><span class="line">        <span class="comment">//把小的数放入新的数组</span></span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.push_back(left[<span class="number">0</span>]);</span><br><span class="line">            left.erase(left.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push_back(right[<span class="number">0</span>]);</span><br><span class="line">            right.erase(right.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当左数组或右数组某个为空时，清空剩余的数</span></span><br><span class="line">    <span class="keyword">while</span> (left.<span class="built_in">size</span>() &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result.push_back(left[<span class="number">0</span>]);</span><br><span class="line">        left.erase(left.<span class="built_in">begin</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (right.<span class="built_in">size</span>() &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result.push_back(right[<span class="number">0</span>]);</span><br><span class="line">        right.erase(right.<span class="built_in">begin</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回有序数组result</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：O(nlog<sub>2</sub>n)</p><p>空间复杂度：O(n)</p><hr><h2 id="快速排序法"><a href="#快速排序法" class="headerlink" title="快速排序法"></a>快速排序法</h2><h3 id="算法原理-5"><a href="#算法原理-5" class="headerlink" title="算法原理"></a>算法原理</h3><ul><li>先用两个指针分别指向数组的开头(left)和结尾(right)，记录数组的第一个数(temp)，也就是left上的数字</li><li>比较right指针和left指针指向的数字</li><li>如果right的值小于temp的值，right上的数覆盖left上的数，右移left指针，直到left上指向的数大于temp，把left上的值覆盖到right上，循环直到left等于right</li><li>如果right的值大于temp的值，左移right指针直到right上的值大于temp，覆盖left上的数，循环到left等于right</li><li>每一次循环，只能确定temp值的索引左侧永远小于temp，右侧永远大于temp，把数组按temp的索引分为左右两个数组</li><li>递归，分别排序左数组和右数组，直到左数组和右数组大小为1时完成排序</li></ul><h3 id="动图展示-5"><a href="#动图展示-5" class="headerlink" title="动图展示"></a>动图展示</h3><img src = "../../../../images/quickSort.gif"><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quick</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">QuickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">//改变arr的排序，获取中间的索引</span></span><br><span class="line">        <span class="comment">//每经过一次Quick，只能确定中间值左侧的数小于中间值，中间值右侧的数大于中间值</span></span><br><span class="line">        <span class="keyword">int</span> middle = Quick(arr, left, right);</span><br><span class="line">        <span class="comment">//将arr通过中间索引，分为两段，分别进行排序</span></span><br><span class="line">        arr = QuickSort(arr, left, middle - <span class="number">1</span>);</span><br><span class="line">        arr = QuickSort(arr, middle + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序数组，并且返回数组的中间的索引（中间索引的左侧永远小于中间索引的右侧）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quick</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//确定中间值的数字</span></span><br><span class="line">    <span class="keyword">int</span> temp = arr[left];</span><br><span class="line">    <span class="comment">//帮助自己判断是改变left还是改变right</span></span><br><span class="line">    <span class="keyword">bool</span> help = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (left != right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断状态，如果help为true，改变right，false是改变left</span></span><br><span class="line">        <span class="keyword">if</span> (help)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//当改变right时，直到right位置上的值小于temp时，把right上的数字给到left上</span></span><br><span class="line">            <span class="keyword">if</span> (arr[right] &lt; temp)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[left] = arr[right];</span><br><span class="line">                <span class="comment">//切换help，改变状态</span></span><br><span class="line">                help = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//当改变left时，直到left位置上的值小于temp时，把left上的数字给到right上</span></span><br><span class="line">            <span class="keyword">if</span> (arr[left] &gt; temp)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[right] = arr[left];</span><br><span class="line">                <span class="comment">//切换help，改变状态</span></span><br><span class="line">                help = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当left等于right时，把temp给到中间，并返回中间的索引</span></span><br><span class="line">    arr[left] = temp;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-5"><a href="#复杂度分析-5" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：最好：O(nlog<sub>2</sub>n)，最坏：O(n<sup>2</sup>)，平均：O(nlog<sub>2</sub>n)。</p><p>空间复杂度：O(nlog<sub>2</sub>n)。</p><hr><h2 id="堆排序法"><a href="#堆排序法" class="headerlink" title="堆排序法"></a>堆排序法</h2><h3 id="算法原理-6"><a href="#算法原理-6" class="headerlink" title="算法原理"></a>算法原理</h3><ul><li>把数组想像成一个二叉树</li><li>遍历有子树的节点（数组长度一半以内），比较该节点和他的子树，把最小的值放在该节点，是的该节点比他的所有子树都小</li><li>遍历结束后，把数组的第一个数（根节点）放入到新的数组中</li><li>数排序、得到根节点进行循环</li><li>循环原数组的长度的次数，返回的新数组就是排序结束的数组</li></ul><h3 id="动图展示-6"><a href="#动图展示-6" class="headerlink" title="动图展示"></a>动图展示</h3><img src = "../../../../images/heapSort.gif"><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SmallHead</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">HeapSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">    <span class="keyword">while</span>(arr.<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//排序成小顶堆</span></span><br><span class="line">        SmallHead(arr);</span><br><span class="line">        <span class="comment">//把小顶堆的第一个数给结果</span></span><br><span class="line">        temp.push_back(arr[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//删除第一个元素</span></span><br><span class="line">        arr.erase(arr.<span class="built_in">begin</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序树的为小顶堆（根节点最小）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SmallHead</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.<span class="built_in">size</span>(),left,right;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//left、right为分别为数组的索引i的左、右子树</span></span><br><span class="line">        left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">        right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//如果左子树存在，且左子树比父节点小，那么进行交换</span></span><br><span class="line">        <span class="keyword">if</span> (left&lt;n &amp;&amp; arr[left]&lt;arr[i])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[left] = arr[left] ^ arr[i];</span><br><span class="line">            arr[i] = arr[left] ^ arr[i];</span><br><span class="line">            arr[left] = arr[left] ^ arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果右子树存在，且右子树比父节点小，那么进行交换</span></span><br><span class="line">        <span class="keyword">if</span> (right&lt;n &amp;&amp; arr[right]&lt;arr[i])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[right] = arr[right] ^ arr[i];</span><br><span class="line">            arr[i] = arr[right] ^ arr[i];</span><br><span class="line">            arr[right] = arr[right] ^ arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-6"><a href="#复杂度分析-6" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：最好和最坏情况的时间复杂度都为：O(nlog<sub>2</sub>n)。</p><p>空间复杂度：O(1)</p><hr><h2 id="计数排序法"><a href="#计数排序法" class="headerlink" title="计数排序法"></a>计数排序法</h2><h3 id="算法原理-7"><a href="#算法原理-7" class="headerlink" title="算法原理"></a>算法原理</h3><ul><li>创建一个数组中最大值大小的计数数组</li><li>遍历待排序数组，把待排序数组中的值作为计数数组的索引，计数数组中对应的值加加</li><li>遍历计数数组，如果数组中的值大于1，则在结果数组中推入计数数组的索引</li><li>返回结果数组</li></ul><h3 id="动图展示-7"><a href="#动图展示-7" class="headerlink" title="动图展示"></a>动图展示</h3><img src = "../../../../images/countingSort.gif"><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">CountingSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr,<span class="keyword">int</span> <span class="built_in">max</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建计数数组</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">temp</span><span class="params">(<span class="built_in">max</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//待排序数组的值作为计数数组的索引，对应位置加加</span></span><br><span class="line">        temp[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建结果数组</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="comment">//遍历计数数组，把计数数组的索引推入结果数组中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">max</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (temp[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(i);</span><br><span class="line">            temp[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-7"><a href="#复杂度分析-7" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：O(n+k)。（k为计数数组的大小）</p><p>空间复杂度：O(n+k)。</p><hr><h2 id="桶排序法"><a href="#桶排序法" class="headerlink" title="桶排序法"></a>桶排序法</h2><h3 id="算法原理-8"><a href="#算法原理-8" class="headerlink" title="算法原理"></a>算法原理</h3><ul><li>设置一定数量的桶，每个桶设置一个大小范围</li><li>遍历待排序数组，把里面的元素按大小放入不同的桶中</li><li>按顺序遍历桶，对桶中的元素进行排序，然后按顺序推入结果中</li></ul><h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><img src = "../../../../images/bucketSort.png"><h3 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">BucketSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr, <span class="keyword">int</span> <span class="built_in">max</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建桶，默认弄是个桶</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">temp</span><span class="params">(<span class="number">10</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;())</span></span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span> = <span class="built_in">max</span> / <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//按大小推入桶</span></span><br><span class="line">        temp[arr[i] / <span class="number">10</span>].push_back(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//对桶中的数进行插入排序</span></span><br><span class="line">        temp[i] = InsertionSort(temp[i]);</span><br><span class="line">        <span class="keyword">while</span> (temp[i].<span class="built_in">size</span>() &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//把数组中的值全都按顺序推入结果中</span></span><br><span class="line">            result.push_back(temp[i][<span class="number">0</span>]);</span><br><span class="line">            temp[i].erase(temp[i].<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-8"><a href="#复杂度分析-8" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：最好：O(n)，最坏：O(n<sup>2</sup>)，平均：O(n+k)。</p><p>空间复杂度：O(n+k)。</p><hr><h2 id="基数排序法"><a href="#基数排序法" class="headerlink" title="基数排序法"></a>基数排序法</h2><h3 id="算法原理-9"><a href="#算法原理-9" class="headerlink" title="算法原理"></a>算法原理</h3><ul><li>创建一个大小为10的基数数组</li><li>获取待排序数组中数的个位数，然后把这个数作为索引，放入基数数组中</li><li>然后从基数数组中按顺序放回原数组中</li><li>进行循环，直至数的所有位数都已经被取到</li></ul><h3 id="动图展示-8"><a href="#动图展示-8" class="headerlink" title="动图展示"></a>动图展示</h3><img src = "../../../../images/radixSort.gif"><h3 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">RadixSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr,<span class="keyword">int</span> <span class="built_in">max</span>)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">temp</span><span class="params">(<span class="number">10</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;())</span></span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//通过max获取循环次数</span></span><br><span class="line">    <span class="built_in">max</span>--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; <span class="built_in">max</span> &gt; <span class="number">0</span>; <span class="built_in">max</span> /= <span class="number">10</span>,i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从个数位开始，进行基数存放</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            num = arr[j] / (<span class="built_in">pow</span>(<span class="number">10</span>, i));</span><br><span class="line">            temp[num%<span class="number">10</span>].push_back(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        arr.<span class="built_in">clear</span>();<span class="comment">//清空原数组</span></span><br><span class="line">        <span class="comment">//把基数数组中的元素按顺序放入arr中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; temp.<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (temp[j].<span class="built_in">size</span>() &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr.push_back(temp[j][<span class="number">0</span>]);</span><br><span class="line">                temp[j].erase(temp[j].<span class="built_in">begin</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-9"><a href="#复杂度分析-9" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：O(n*k)。</p><p>空间复杂度：O(n+k)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
